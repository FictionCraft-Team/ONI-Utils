buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def ENV = System.getenv()
version = "${versions}"
group = "com.github.wintersteve25" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                oniutils {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                oniutils {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'oniutils', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                oniutils {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources { srcDir 'src/generated/resources' }
        // exclude tests
//        java {
//            exclude 'com/github/wintersteve25/oniutils/tests'
//        }
    }
}

repositories {
    maven { url 'https://modmaven.dev/' }

	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

	maven { url 'https://maven.theillusivec4.top/' }

    mavenLocal()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.27'
    
	// jei
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2-forge:10.2.1.283")
    compileOnly fg.deobf("mezz.jei:jei-1.18.2-forge-api:10.2.1.283")
    compileOnly fg.deobf("mezz.jei:jei-1.18.2-common-api:10.2.1.283")
    
	// geckolib
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.57')

    // mekanism
    compileOnly fg.deobf ("mekanism:Mekanism:1.18.2-10.2.5.465:api")
    implementation fg.deobf ("mekanism:Mekanism:1.18.2-10.2.5.465")

    // curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.0")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.0:api")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "ONIUtils",
            "Specification-Vendor": "oniutilssareus",
            "Specification-Version": "${version}", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"oniutilssareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        mavenLocal()
    }
}
